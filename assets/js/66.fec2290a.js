(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{583:function(t,a,e){"use strict";e.r(a);var s=e(5),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"frontmatter-title"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[t._v("#")]),t._v(" "+t._s(t.$frontmatter.title))]),t._v(" "),e("h2",{attrs:{id:"exam-parsing-regexps"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#exam-parsing-regexps"}},[t._v("#")]),t._v(" Exam: Parsing RegExps")]),t._v(" "),e("ul",[e("li",[t._v("Read carefully "),e("a",{attrs:{href:"https://github.com/ULL-ESIT-PL/exam-training-template/blob/master/docs/exam.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("the pdf with the questions"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("Fill the code in this template repo "),e("a",{attrs:{href:"https://github.com/ULL-ESIT-PL/exam-training-template",target:"_blank",rel:"noopener noreferrer"}},[t._v("ULL-ESIT-PL/exam-training-template"),e("OutboundLink")],1)])]),t._v(" "),e("p",[e("a",{attrs:{href:"https://astexplorer.net/#/gist/4ea2b52f0e546af6fb14f9b2f5671c1c/49dafda5429858220f62387740fd4226cdc3dde0",target:"_blank",rel:"noopener noreferrer"}},[t._v("AST Explorer"),e("OutboundLink")],1),t._v(" supports various regexp parsers. Feel free to play with them and have a look at the shapes of the ASTs.")]),t._v(" "),e("p",[t._v("Watch this video")]),t._v(" "),e("p",[e("youtube",{attrs:{id:"https://youtu.be/bxadjvhtffs"}})],1),t._v(" "),e("p",[t._v("and this other from minute 30:30:")]),t._v(" "),e("p",[e("youtube",{attrs:{id:"https://youtu.be/W94dX7zeRO0"}})],1),t._v(" "),e("h2",{attrs:{id:"exam-parsing-json"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#exam-parsing-json"}},[t._v("#")]),t._v(" Exam: Parsing JSON")]),t._v(" "),e("p",[t._v("See also another exam example in section "),e("RouterLink",{attrs:{to:"/practicas/tfa.html#translator-from-egg-ast-to-ast-term"}},[t._v("Translator from Egg AST to AST Term")]),t._v(" of the TFA.\nThe task there is to build a JSON Parser and translate a JSON containing the AST of an Egg parser onto the term notation.")],1),t._v(" "),e("h3",{attrs:{id:"parsing-json"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parsing-json"}},[t._v("#")]),t._v(" Parsing JSON")]),t._v(" "),e("h4",{attrs:{id:"question"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#question"}},[t._v("#")]),t._v(" Question")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"/assets/old-exam-sample.pdf"}},[t._v("Exam Parsing JSON")]),t._v(": pdf file. Question: Parse the JSON Language")])]),t._v(" "),e("h4",{attrs:{id:"examples-of-solutions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#examples-of-solutions"}},[t._v("#")]),t._v(" Examples of Solutions")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://github.com/ULL-ESIT-PL/learning-nearley/blob/main/examples/json.ne",target:"_blank",rel:"noopener noreferrer"}},[t._v("Solution: JSON parser in nearley.js"),e("OutboundLink")],1),t._v(" "),e("ul",[e("li",[t._v("Task to do: Improve the solution by using your own lexical analyzer generator instead of the current moo lexer, removing the explicit use of white spaces (syntactic variable "),e("code",[t._v("_")]),t._v(" like in the production rule "),e("code",[t._v('pair -> key _ ":" _ value')]),t._v(") in the Nearley grammar")])])]),t._v(" "),e("li",[e("a",{attrs:{href:"https://gist.github.com/justjkk/436828/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Solution: JSON parser in yacc"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/pegjs/pegjs/blob/master/examples/json.pegjs",target:"_blank",rel:"noopener noreferrer"}},[t._v("Solution: JSON parser in pegjs"),e("OutboundLink")],1)])]),t._v(" "),e("h3",{attrs:{id:"translator-from-egg-ast-to-ast-term"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#translator-from-egg-ast-to-ast-term"}},[t._v("#")]),t._v(" Translator from Egg AST to AST Term")]),t._v(" "),e("h4",{attrs:{id:"question-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#question-2"}},[t._v("#")]),t._v(" Question")]),t._v(" "),e("p",[t._v("Example of a second part for the exam:")]),t._v(" "),e("p",[t._v("Assume the input JSON contains an Egg AST and translate it to AST Term notation.")]),t._v(" "),e("p",[t._v("Here is an example. Given the input program:")]),t._v(" "),e("div",{staticClass:"language-ruby line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[t._v("➜  evm2term git"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("master"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" cat examples"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("property"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("egg \nx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string-literal"}},[e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sub"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string-literal"}},[e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"length"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("Whose JSON looks like:")]),t._v(" "),e("div",{staticClass:"language-json line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[t._v("➜  evm2term git"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("(master) head -n "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" examples/property.json \n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"apply"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"operator"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"property"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("p",[t._v("The output of the "),e("code",[t._v("evm2term")]),t._v(" translator will be:")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("➜  evm2term git"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("master"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" evm2term examples"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("property"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("json \n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("op"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("property")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("op"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("word"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("args")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("sub"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("args")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("length"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("Possible Improvements if you decide it to present as TFA:")]),t._v(" "),e("ul",[e("li",[t._v("Add pretty printing of the term")]),t._v(" "),e("li",[t._v("Give support to JS Esprima ASTs")]),t._v(" "),e("li",[t._v("Make it generic so that any compiler AST can be added via some configuration")])]),t._v(" "),e("h4",{attrs:{id:"example-of-solution"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example-of-solution"}},[t._v("#")]),t._v(" Example of Solution")]),t._v(" "),e("ul",[e("li",[t._v("See package "),e("a",{attrs:{href:"https://www.npmjs.com/package/evm2term",target:"_blank",rel:"noopener noreferrer"}},[t._v("evm2term"),e("OutboundLink")],1),t._v(" and file "),e("a",{attrs:{href:"https://github.com/crguezl/evm2term/blob/master/index.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("crguezl/evm2term/index.js"),e("OutboundLink")],1),t._v(" for a solution using "),e("code",[t._v("estraverse")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);