(window.webpackJsonp=window.webpackJsonp||[]).push([[238],{750:function(s,a,e){"use strict";e.r(a);var t=e(5),n=Object(t.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"analisis-de-tipos-conceptos-basicos"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#analisis-de-tipos-conceptos-basicos"}},[s._v("#")]),s._v(" Análisis de Tipos: Conceptos Básicos")]),s._v(" "),e("p",[s._v("En la mayoría de los lenguajes los objetos manipulados son declarados en\nalguna parte del programa y usados en otras. Ya dijimos que "),e("strong",[s._v("el análisis de ámbito es el cálculo de la función que asigna a un uso de un objeto la definición que se le aplica")]),s._v(".")]),s._v(" "),e("p",[s._v("El análisis de tipos tiene por objetivo asegurar que el uso de los\nobjetos definidos es correcto: esto es, que su uso se atiene a la\nsemántica de su definición; por ejemplo,")]),s._v(" "),e("ul",[e("li",[s._v("que un array de enteros no es\nllamado como función o")]),s._v(" "),e("li",[s._v("que no se intenta incrementar una función o")]),s._v(" "),e("li",[s._v("que\nel valor retornado por una función es de la naturaleza descrita en su\ndefinición.")])]),s._v(" "),e("h2",{attrs:{id:"expresiones-de-tipo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#expresiones-de-tipo"}},[s._v("#")]),s._v(" Expresiones de Tipo")]),s._v(" "),e("p",[s._v("Una forma adecuada de representar los tipos dentro de un "),e("em",[s._v("compilador")]),s._v(" es\nusando un lenguaje de "),e("strong",[s._v("expresiones de tipo")]),s._v(".")]),s._v(" "),e("p",[s._v("Un lenguaje de las expresiones de tipo debe\ndescribir de manera clara y sencilla los tipos del lenguaje fuente. No\nconfunda este lenguaje con el sub-lenguaje del lenguaje fuente que\nconsiste en las declaraciones o definiciones.")]),s._v(" "),e("p",[s._v("No tienen por que ser\niguales. El compilador traduce las declaraciones de tipo en expresiones\nde tipo.")]),s._v(" "),e("p",[s._v("El lenguaje de las expresiones de tipo es la representación\ninterna que el compilador tiene de estas declaraciones y depende del\ncompilador. El lenguaje de las declaraciones no.")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://img.brainkart.com/imagebk9/uxduSYs.jpg",alt:""}})]),s._v(" "),e("h2",{attrs:{id:"sistema-de-tipos"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sistema-de-tipos"}},[s._v("#")]),s._v(" Sistema  de Tipos")]),s._v(" "),e("p",[s._v("Un "),e("strong",[s._v("Sistema de Tipos")]),s._v(" de un lenguaje/compilador es el conjunto de reglas del lenguaje"),e("br"),s._v("\nque "),e("strong",[s._v("permite asignar expresiones de tipo a las instancias de uso de los objetos del programa")]),s._v(".")]),s._v(" "),e("p",[s._v("Si bien el sistema de tipos es una propiedad del lenguaje, no es raro\nque los compiladores introduzcan modificaciones en el sistema de tipos\ndel lenguaje.")]),s._v(" "),e("p",[s._v("Por ejemplo en Pascal el tipo de un array incluye los\níndices del array). Esto y las reglas de equivalencia de tipos de\nPascal limitaban gravemente la genericidad de las funciones en Pascal. Por\neso algunos compiladores Pascal permitian en una llamada a función la\ncompatibilidad de tipos entre arrays de diferente tamaño y diferentes\nconjuntos de índices. Desgraciadamente la forma en la que lo hacían\ndifería de compilador a compilador.")]),s._v(" "),e("h2",{attrs:{id:"comprobador-de-tipos"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#comprobador-de-tipos"}},[s._v("#")]),s._v(" Comprobador de Tipos")]),s._v(" "),e("p",[s._v("Un "),e("strong",[s._v("Comprobador de Tipos")]),s._v(" verifica que el uso de los objetos en los constructos de uso se\natiene a lo especificado en sus declaraciones o definiciones de acuerdo\na las reglas especificadas por el "),e("em",[s._v("sistema de tipos")]),s._v(".")]),s._v(" "),e("h2",{attrs:{id:"tipado-estatico-y-tipado-dinamico"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tipado-estatico-y-tipado-dinamico"}},[s._v("#")]),s._v(" Tipado estático y tipado dinámico")]),s._v(" "),e("p",[s._v("Un lenguaje de programación tiene "),e("strong",[s._v("tipado estático")]),s._v("\nsi su comprobación de tipos ocurre en\ntiempo de compilación sin tener que comprobar equivalencias en tiempo de\nejecución.")]),s._v(" "),e("p",[s._v("Un lenguaje de programación tiene "),e("strong",[s._v("tipado dinámico")]),s._v("\nsi el lenguaje realiza comprobaciones\nde tipo en tiempo de ejecución.")]),s._v(" "),e("p",[s._v("En un sistema de tipos dinámico "),e("em",[s._v("los tipos suelen estár asociados con "),e("strong",[s._v("los valores")]),s._v(" no con las variables")]),s._v(".")]),s._v(" "),e("h2",{attrs:{id:"tipado-fuerte-y-tipado-debil"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tipado-fuerte-y-tipado-debil"}},[s._v("#")]),s._v(" Tipado Fuerte y Tipado débil")]),s._v(" "),e("p",[s._v("Aunque el significado de los términos  Fuertemente Tipado y su contrario Débilmente Tipado varían con los\nautores, parece haber consenso en que los lenguajes con tipado fuerte\nsuelen reunir alguna de estas características:")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("La comprobación en tiempo de compilación de las violaciones de las\nrestricciones impuestas por el sistema de tipos. El compilador\nasegura que para cualesquiera operaciones los operandos tienen los\ntipos válidos.")])]),s._v(" "),e("li",[e("p",[s._v("Toda operación sobre tipos inválidos es rechazada bien en tiempo de\ncompilación o de ejecución.")])]),s._v(" "),e("li",[e("p",[s._v("Algunos autores consideran que el término implica desactivar\ncualquier conversión de tipos implícita. Si el programador quiere\nuna conversión deberá explicitarla.")])]),s._v(" "),e("li",[e("p",[s._v("La ausencia de modos de evadir al sistema de tipos.")])]),s._v(" "),e("li",[e("p",[s._v("Que el tipo de un objeto de datos no varíe durante la vida del\nobjeto. Por ejemplo, una instancia de una clase no puede ver su\nclase alterada durante la ejecución.")])])]),s._v(" "),e("h2",{attrs:{id:"sobrecarga-polimorfismo-e-inferencia-de-tipos"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sobrecarga-polimorfismo-e-inferencia-de-tipos"}},[s._v("#")]),s._v(" Sobrecarga, Polimorfismo e Inferencia de Tipos")]),s._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[s._v("Sobrecarga")]),s._v(" "),e("p",[s._v("Un símbolo se dice "),e("strong",[s._v("sobrecargado")]),s._v(" si su significado varía dependiendo del contexto. En\nla mayoría de los lenguajes Los operadores aritméticos suelen estar\nsobrecargados, dado que se sustancian en diferentes algoritmos según sus\noperandos sean enteros, flotantes, etc.")])]),s._v(" "),e("p",[s._v("En algunos lenguajes se permite la sobrecarga de funciones. Así es\nposible tener dos funciones llamadas "),e("code",[s._v("min")]),s._v(":")]),s._v(" "),e("div",{staticClass:"language-c line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[s._v("  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("min")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("       string "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("min")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("string a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" string b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("     \n       "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("          "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("strcmp")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n       "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                     "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                       \n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("                             "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("                                 \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("A la hora de evaluar el tipo de las expresiones es el contexto de la\nllamada el que determina el tipo de la expresión:")]),s._v(" "),e("div",{staticClass:"language-c line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[s._v("    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("float")]),s._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("y"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    string c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("d"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    u "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("min")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("y"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* Puede que correcto: x e y seran truncados a enteros. Tipo entero */")]),s._v("\n    v "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("min")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* Correcto: Tipo devuelto es entero */")]),s._v("\n    w "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("min")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("d"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* Correcto: Tipo devuelto es string */")]),s._v("\n    t "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("min")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* Error */")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[e("strong",[s._v("¿Como afecta al análisis de ámbito la sobrecarga de operadores?")])]),s._v(" "),e("h2",{attrs:{id:"inferencia-de-tipos"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inferencia-de-tipos"}},[s._v("#")]),s._v(" Inferencia de Tipos")]),s._v(" "),e("p",[s._v("La "),e("strong",[s._v("Inferencia de Tipos")]),s._v(" hace referencia a aquellos algoritmos que deducen automáticamente en\ntiempo de compilación - sin información adicional del programador, o\nbien con anotaciones parciales del programador - el tipo asociado con un\nuso de un objeto del programa.")]),s._v(" "),e("p",[s._v("Un buen número de lenguajes de\nprogramación funcional permiten implantar inferencia de tipos (Haskell,\nOCaml, ML, etc).")]),s._v(" "),e("p",[e("strong",[s._v("Type inference refers to the process of determining the appropriate types for expressions based on how they are used")]),s._v(".")]),s._v(" "),e("p",[s._v("For example, in the expression "),e("code",[s._v("f 3")]),s._v(", OCaml knows that "),e("code",[s._v("f")]),s._v(" must be a function, because it is applied to something (not because its name is "),e("code",[s._v("f")]),s._v("!) and that it takes an "),e("code",[s._v("int")]),s._v(" as input.  It knows nothing about the output type.  Therefore the type inference mechanism of OCaml would assign "),e("code",[s._v("f")]),s._v(" the type "),e("code",[s._v("int -> 'a")]),s._v("  where "),e("code",[s._v("'a")]),s._v("is a "),e("strong",[s._v("type variable")]),s._v(".")]),s._v(" "),e("div",{staticClass:"language-ocaml line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-ocaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("#")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" f "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" f "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";;")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("int "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token type-variable function"}},[s._v("'a")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token type-variable function"}},[s._v("'a")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("Véase como ejemplo de inferencia de tipos la siguiente sesión en Ocaml:")]),s._v(" "),e("div",{staticClass:"language-ocaml line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-ocaml"}},[e("code",[s._v("    pl"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("@")]),s._v("nereida"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~/")]),s._v("src"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("perl"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("attributegrammar"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("Language"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("AttributeGrammar"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.08")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("examples"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("$")]),s._v(" ocaml\n            Objective Caml version "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.09")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("#")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" minimo "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" i j "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" i"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("j "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v(" i "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" j"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";;")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" minimo "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token type-variable function"}},[s._v("'a")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token type-variable function"}},[s._v("'a")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token type-variable function"}},[s._v("'a")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("#")]),s._v(" minimo "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";;")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" int "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("#")]),s._v(" minimo "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.9")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";;")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" float "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.9")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("#")]),s._v(" minimo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hola"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"mundo"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";;")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" string "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hola"')]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[s._v("El compilador "),e("code",[s._v("OCaml")]),s._v(" infiere el tipo de las expresiones.")]),s._v(" "),e("p",[s._v("Así el tipo asociado con la función minimo es "),e("code",[s._v("'a -> 'a -> 'a")]),s._v(" que es una expresión de tipo que contiene "),e("strong",[s._v("variables de tipo")]),s._v(". El operador "),e("code",[s._v("->")]),s._v(" es asociativo a derechas y asi la expresión debe ser leída como "),e("code",[s._v("'a -> ('a -> 'a)")]),s._v(".")]),s._v(" "),e("p",[s._v("Básicamente dice: es una función que toma un argumento de tipo "),e("code",[s._v("'a")]),s._v(" (donde "),e("code",[s._v("'a")]),s._v(" es una "),e("strong",[s._v("variable de tipo")]),s._v(" que será instanciada en el momento del uso de la función) y devuelve una función que toma elementos de tipo "),e("code",[s._v("'a")]),s._v(" y retorna elementos de tipo "),e("code",[s._v("'a")]),s._v(".")]),s._v(" "),e("h2",{attrs:{id:"funciones-de-varias-variables-versus-funciones-que-retornan-funciones"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#funciones-de-varias-variables-versus-funciones-que-retornan-funciones"}},[s._v("#")]),s._v(" Funciones de Varias Variables versus Funciones que retornan Funciones")]),s._v(" "),e("p",[s._v("Aunque podría pensarse que una descripción mas adecuada del tipo de la\nfunción "),e("code",[s._v("minimo")]),s._v(" fuera "),e("code",[s._v("'a x 'a -> 'a")]),s._v(", lo cierto es que en algunos\nlenguajes funcionales es usual que todas las funciones sean consideradas\ncomo funciones de una sóla variable.")]),s._v(" "),e("p",[s._v("La función de dos variables\n"),e("code",[s._v("'a x 'a -> 'a")]),s._v(" puede verse como una función "),e("code",[s._v("'a -> ('a -> 'a)")]),s._v(".")]),s._v(" "),e("p",[s._v("En\nefecto la función "),e("code",[s._v("minimo")]),s._v(" cuando recibe un argumento retorna una\nfunción:")]),s._v(" "),e("div",{staticClass:"language-ocaml line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-ocaml"}},[e("code",[s._v("    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("#")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" min_mundo "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" minimo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"mundo"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";;")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" min_mundo "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" string "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" string "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("#")]),s._v(" min_mundo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"pedro"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";;")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" string "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"mundo"')]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("#")]),s._v(" min_mundo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"antonio"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";;")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" string "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"antonio"')]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("#")]),s._v(" min_mundo "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";;")]),s._v("\n    This expression has "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" int but is here used "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" string\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("#")]),s._v(" min_mundo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("string_of_int"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";;")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" string "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"4"')]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[s._v("Esta estrategia de reducir funciones de varias variables a funciones de\nuna variable que retornan funciones de una variable se conoce con el\nnombre de  "),e("strong",[s._v("currying")]),s._v(" o "),e("strong",[s._v("aplicación parcial")]),s._v(".")]),s._v(" "),e("h2",{attrs:{id:"polimorfismo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#polimorfismo"}},[s._v("#")]),s._v(" Polimorfismo")]),s._v(" "),e("p",[s._v("El "),e("strong",[s._v("polimorfismo")]),s._v(" es una propiedad de ciertos lenguajes que permite una interfaz uniforme a diferentes tipos de datos.")]),s._v(" "),e("p",[s._v("Se conoce como "),e("strong",[s._v("función polimorfa")]),s._v(" a una función que puede ser aplicada o evaluada sobre diferentes tipos de datos.")]),s._v(" "),e("p",[e("strong",[s._v("Un tipo de datos se dice polimorfo")]),s._v(" si es un tipo de datos generalizado o "),e("em",[s._v("no completamente especificado")]),s._v(". Por ejemplo, una lista cuyos elementos son de cualquier tipo.")]),s._v(" "),e("h2",{attrs:{id:"polimorfismo-ad-hoc-y-polimorfismo-parametrico"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#polimorfismo-ad-hoc-y-polimorfismo-parametrico"}},[s._v("#")]),s._v(" Polimorfismo Ad-hoc y polimorfismo paramétrico")]),s._v(" "),e("p",[s._v("Se llama "),e("strong",[s._v("Polimorfismo Ad-hoc")]),s._v(" a aquel en el que el número de combinaciones que pueden usarse es finito y las combinaciones deben ser definidas antes de su uso.")]),s._v(" "),e("p",[s._v("Se habla de "),e("strong",[s._v("polimorfismo paramétrico")]),s._v(" si es posible escribir el código sin mención específica de los tipos, de manera que el código puede ser usado con un número arbitrario de tipos.")]),s._v(" "),e("p",[s._v("Por ejemplo, la herencia y la sobrecarga de funciones y métodos son mecanismos que proveen polimorfismo ad-hoc.")]),s._v(" "),e("p",[s._v("Los lenguajes funcionales, como OCaml suelen proveer polimorfismo paramétrico.")]),s._v(" "),e("p",[s._v("En OOP el polimorfismo paramétrico suele denominarse programación genérica")]),s._v(" "),e("p",[s._v("En el siguiente ejemplo en OCaml construimos una función similar al map de Perl.")]),s._v(" "),e("p",[s._v("La función "),e("code",[s._v("mymap")]),s._v(" ilustra el polimorfismo paramétrico:")]),s._v(" "),e("p",[s._v("la función puede ser usada con un número arbitrario de tipos, no hemos tenido que hacer ningún tipo de declaración explícita y sin embargo el uso incorrecto de los tipos es señalado como un error:")]),s._v(" "),e("div",{staticClass:"language-ocaml line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-ocaml"}},[e("code",[s._v("    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("#")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rec")]),s._v(" mymap f list "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("match")]),s._v(" list "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v("\n          "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" hd "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v(" tail "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" f hd "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v(" mymap f tail"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";;")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("val")]),s._v(" mymap "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token type-variable function"}},[s._v("'a")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token type-variable function"}},[s._v("'b")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token type-variable function"}},[s._v("'a")]),s._v(" list "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token type-variable function"}},[s._v("'b")]),s._v(" list "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("#")]),s._v(" mymap "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("  n "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";;")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" int list "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("#")]),s._v(" mymap "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("  n "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hola"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"mundo"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";;")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" char list "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token char"}},[s._v("'h'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token char"}},[s._v("'m'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("#")]),s._v(" mymap "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("  n "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hola"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"mundo"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";;")]),s._v("\n    This expression has "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" string but is here used "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" int\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("h2",{attrs:{id:"equivalencia-de-expresiones-de-tipo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#equivalencia-de-expresiones-de-tipo"}},[s._v("#")]),s._v(" Equivalencia de Expresiones de Tipo")]),s._v(" "),e("p",[s._v("La introducción de nombres para las expresiones de tipo introduce una\nambiguedad en la interpretación de la equivalencia de tipos. Por\nejemplo, dado el código:")]),s._v(" "),e("div",{staticClass:"language-c line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[s._v("                     "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" v10"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                     v10 a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                     "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("¿Se considera que "),e("code",[s._v("a")]),s._v(" y "),e("code",[s._v("b")]),s._v(" tienen tipos compatibles?")]),s._v(" "),e("h2",{attrs:{id:"equivalencia-de-tipos-estructural-y-equivalencia-de-tipos-nominal"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#equivalencia-de-tipos-estructural-y-equivalencia-de-tipos-nominal"}},[s._v("#")]),s._v(" Equivalencia de tipos estructural y equivalencia de tipos nominal")]),s._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[s._v("Equivalencia de tipos estructural")]),s._v(" "),e("p",[s._v("Se habla de "),e("strong",[s._v("equivalencia de tipos estructural")]),s._v(" cuando los nombres de tipo son sustituidos por sus definiciones y la equivalencia de las expresiones de tipo se traduce en la equivalencia de sus árboles sintácticos o DAGs.")])]),s._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[s._v("Equivalencia de tipos nominal")]),s._v(" "),e("p",[s._v("Si los nombres no son sustituidos se habla de equivalencia por nombres o de "),e("strong",[s._v("equivalencia de tipos nominal")]),s._v(".")])]),s._v(" "),e("p",[s._v("Si utilizamos la opción de sustituir los nombres por sus definiciones y permitimos en la definición de tipo el uso de nombres de tipo no declarados se pueden producir ciclos en el grafo de tipos.")]),s._v(" "),e("p",[s._v("El lenguaje C impide la presencia de ciclos en el grafo de tipos usando\ndos reglas:")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("Todos los identificadores de tipo han de estar definidos antes de su\nuso, con la excepción de los punteros a registros no declarados")])]),s._v(" "),e("li",[e("p",[s._v("Se usa equivalencia estructural para todos los tipos con la\nexcepción de las "),e("code",[s._v("struct")]),s._v(" para las cuales se usa equivalencia\nnominal")])])]),s._v(" "),e("p",[s._v("Por ejemplo, el siguiente programa:")]),s._v(" "),e("div",{staticClass:"language-c line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[s._v("    nereida"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("src"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("perl"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("testing"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" cat "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("n typeequiv"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("c\n      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  #include "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("stdio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("h"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("record")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" record"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("  record z"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("w"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("recordcopy")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("recordcopy")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" r"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("k"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v("    k "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" r"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* no produce error */")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("    z "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" w"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* no produce error */")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),s._v("    r "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" z"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])]),e("p",[s._v("Produce el siguiente mensaje de error:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("    nereida:~/src/perl/testing> gcc -fsyntax-only typeequiv.c\n    typeequiv.c: En la función 'main':\n    typeequiv.c:19: error: tipos incompatibles en la asignación\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("En lenguajes dinámicos una forma habitual de equivalencia de tipos es el\ntipado pato:")]),s._v(" "),e("h2",{attrs:{id:"duck-typing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#duck-typing"}},[s._v("#")]),s._v(" Duck typing")]),s._v(" "),e("p",[s._v("Se denomina "),e("strong",[s._v("duck typing")]),s._v(" o tipado pato a una forma de tipado dinámico en la que el conjunto de métodos y propiedades del objeto determinan la validez de su uso. Esto es:")]),s._v(" "),e("p",[e("strong",[s._v("dos objetos pertenecen al mismo tipo-pato si implementan/soportan la misma interfaz independientemente de si tienen o no una relación en la jerarquía de herencia.")])]),s._v(" "),e("p",[s._v("El término hace referencia al llamado test del pato: "),e("em",[s._v("If it waddles like a duck, and quacks like a duck, it's a duck!")]),s._v(".")]),s._v(" "),e("h2",{attrs:{id:"conversion-de-tipos"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#conversion-de-tipos"}},[s._v("#")]),s._v(" Conversión de Tipos")]),s._v(" "),e("p",[s._v("El comprobador de tipos modifica el árbol sintáctico para introducir\ndonde sean necesarias. Por ejemplo, si tenemos")]),s._v(" "),e("div",{staticClass:"language-C line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[s._v("    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("float")]),s._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    x"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("Dado el árbol de la expresión "),e("code",[s._v("PLUS(VAR, VAR)")]),s._v(", el analizador de tipos\nintroducirá un nodo intermedio "),e("code",[s._v("INT2FLOAT")]),s._v(" para indicar la necesidad de\nla conversión y especificará el tipo de "),e("code",[s._v("PLUS")]),s._v(" que se usa:")]),s._v(" "),e("p",[e("code",[s._v("PLUSFLOAT(VAR, INT2FLOAT(VAR))")]),s._v(".")]),s._v(" "),e("p",[s._v("Una transformación árbol de optimización que entra en este punto es la\nconversión de tipo en tiempo de compilación de las constantes. Por\nejemplo, dados los dos programas:")]),s._v(" "),e("div",{staticClass:"language-C line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("float")]),s._v(" X"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("N"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("          "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("float")]),s._v(" X"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("N"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("          "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("               "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("               "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("                          "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("                          "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("N"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("N"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("       X"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("          "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("       X"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("        "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("                    "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("                    "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("los efectos sobre el rendimiento serán lamentables si el compilador no\nrealiza la conversión de la constante entera "),e("code",[s._v("1")]),s._v(" del programa de la\nizquierda en tiempo de compilación sino que la conversión se deja a una\nsubrutina de conversión que es llamada en tiempo de ejecución. En tal\ncaso se obtendrían rendimientos completamente diferentes para los\nprogramas en la izquierda y en la derecha.")]),s._v(" "),e("h2",{attrs:{id:"referencias"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#referencias"}},[s._v("#")]),s._v(" Referencias")]),s._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://campusvirtual.ull.es/ocw/pluginfile.php/3847/mod_resource/content/0/perlexamples/node294.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Apuntes del Profesor sobre Análisis de Tipos"),e("OutboundLink")],1),s._v(". 2000-2012.")])])])}),[],!1,null,null,null);a.default=n.exports}}]);