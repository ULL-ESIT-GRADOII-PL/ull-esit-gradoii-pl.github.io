(window.webpackJsonp=window.webpackJsonp||[]).push([[214],{726:function(e,t,a){"use strict";a.r(t);var r=a(5),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"toby-ho-course-on-how-to-make-a-parser-with-nearley-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#toby-ho-course-on-how-to-make-a-parser-with-nearley-js"}},[e._v("#")]),e._v(" Toby Ho Course on How to Make a Parser with Nearley.JS")]),e._v(" "),a("h2",{attrs:{id:"part-one"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#part-one"}},[e._v("#")]),e._v(" Part One")]),e._v(" "),a("p",[e._v("In this drive by code session we’ll show you what a context-free grammar is and how to use it and Nearley to build parsers. JSON is used as the example language we’ll build the parser for.")]),e._v(" "),a("p",[a("youtube",{attrs:{id:"51XwG1W2ysU"}})],1),e._v(" "),a("h2",{attrs:{id:"part-two"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#part-two"}},[e._v("#")]),e._v(" Part Two")]),e._v(" "),a("p",[e._v("In this drive by code session we continue making a JSON parser. After having make a working parser for a subset of the functionality in JSON, we’ll introduce the ability to embed JavaScript code in the grammar to customize the result of a parse. Again, Waikit wrote the code, and I’ll replay them and explain what he did. Enjoy!")]),e._v(" "),a("p",[a("youtube",{attrs:{id:"BpAcf4X5rco"}})],1),e._v(" "),a("h2",{attrs:{id:"part-three"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#part-three"}},[e._v("#")]),e._v(" Part Three")]),e._v(" "),a("p",[e._v("In this drive by code session we’ll demonstrate how to handle whitespaces in a grammar using Nearley.js. The convention used in the video is based on the recommendations by Kartik Chandra - the creator of Nearley.js. As usual, Waikit drove the code before hand, and I’ll replay his code session and explain what he did.")]),e._v(" "),a("h2",{attrs:{id:"part-four"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#part-four"}},[e._v("#")]),e._v(" Part Four")]),e._v(" "),a("p",[e._v("In this episode we’ll demonstrate how to parse a string literal in JSON properly, continuing our series on building parsers using Nearley.js.")]),e._v(" "),a("p",[a("youtube",{attrs:{id:"a2mZTBI1ZxU"}})],1),e._v(" "),a("h2",{attrs:{id:"part-five"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#part-five"}},[e._v("#")]),e._v(" Part Five")]),e._v(" "),a("p",[e._v("Continuing in the series on making parsers, this time, we build a calculator that can add, subtract, multiply and divide. In particular, we tackle the issue of operator precedence.")]),e._v(" "),a("p",[a("youtube",{attrs:{id:"fsXp3Oh7JUU"}})],1)])}),[],!1,null,null,null);t.default=s.exports}}]);