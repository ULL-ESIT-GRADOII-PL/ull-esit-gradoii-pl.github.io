(window.webpackJsonp=window.webpackJsonp||[]).push([[212],{725:function(e,s,t){"use strict";t.r(s);var a=t(5),r=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"more-syntax-tips-and-tricks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#more-syntax-tips-and-tricks"}},[e._v("#")]),e._v(" More syntax: tips and tricks")]),e._v(" "),t("h4",{attrs:{id:"comments"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#comments"}},[e._v("#")]),e._v(" Comments")]),e._v(" "),t("p",[e._v("Comments are marked with '#'. Everything from "),t("code",[e._v("#")]),e._v(" to the end of a line is\nignored:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('expression -> number "+" number # sum of two numbers\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h4",{attrs:{id:"charsets"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#charsets"}},[e._v("#")]),e._v(" Charsets")]),e._v(" "),t("p",[e._v("You can use valid RegExp charsets in a rule (unless you're using a\n"),t("a",{attrs:{href:"tokenizers"}},[e._v("tokenizer")]),e._v("):")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("not_a_letter -> [^a-zA-Z]\n")])])]),t("p",[e._v("The "),t("code",[e._v(".")]),e._v(" character can be used to represent any character.")]),e._v(" "),t("h4",{attrs:{id:"case-insensitive-string-literals"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#case-insensitive-string-literals"}},[e._v("#")]),e._v(" Case-insensitive string literals")]),e._v(" "),t("p",[e._v("You can create case-insensitive string literals by adding an "),t("code",[e._v("i")]),e._v(" after the\nstring literal:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('cow -> "cow"i # matches CoW, COW, and so on.\n')])])]),t("p",[e._v("Note that if you are using a lexer, your lexer should use the "),t("code",[e._v("i")]),e._v(" flag in its\nregexes instead. That is, if you are using a lexer, you should "),t("em",[e._v("not")]),e._v(" use the\n"),t("code",[e._v("i")]),e._v(" suffix in nearley.")])])}),[],!1,null,null,null);s.default=r.exports}}]);