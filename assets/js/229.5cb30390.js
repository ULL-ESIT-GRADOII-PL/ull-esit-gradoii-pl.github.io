(window.webpackJsonp=window.webpackJsonp||[]).push([[229],{741:function(s,t,e){"use strict";e.r(t);var a=e(5),n=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"jscodeshift"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jscodeshift"}},[s._v("#")]),s._v(" jscodeshift")]),s._v(" "),e("h2",{attrs:{id:"codemods-and-code-refactoring"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#codemods-and-code-refactoring"}},[s._v("#")]),s._v(" Codemods and Code Refactoring")]),s._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/facebookarchive/codemod",target:"_blank",rel:"noopener noreferrer"}},[s._v("Codemod"),e("OutboundLink")],1),s._v(" was a tool/library developed by FaceBook to assist with "),e("strong",[s._v("large-scale codebase refactors")]),s._v(" that can be partially automated but still required human oversight and occasional intervention. It is now deprecated and archived.")]),s._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[s._v("Definition: Code refactoring")]),s._v(" "),e("p",[e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Code_refactoring",target:"_blank",rel:"noopener noreferrer"}},[s._v("Code refactoring"),e("OutboundLink")],1),s._v(" is the process of restructuring existing computer code—changing the factoring—without changing its external behavior.")])]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("p",[s._v("Let's say you're deprecating your use of the "),e("code",[s._v("<font>")]),s._v(" tag.  From the command line, you might make progress by running:")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[s._v("codemod -m -d /home/jrosenstein/www --extensions php,html \\\n    '<font *color=\"?(.*?)\"?>(.*?)</font>' \\\n    '<span style=\"color: \\1;\">\\2</span>'\n")])])]),e("p",[s._v("For each match of the regex, you were shown a colored diff, and asked if you want to accept the change (the replacement of the "),e("code",[s._v("<font>")]),s._v(" tag with a "),e("code",[s._v("<span>")]),s._v(" tag), reject it, or edit the line in question in your "),e("code",[s._v("$EDITOR")]),s._v(" of choice.")]),s._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[s._v("Codemod Definition")]),s._v(" "),e("p",[e("strong",[s._v("Codemods are scripts used to rewrite other codes")]),s._v(". Think of them as a find and replace functionality that can read and write code. You can use them to")]),s._v(" "),e("ol",[e("li",[s._v("update source code to fit a team’s coding conventions,")]),s._v(" "),e("li",[s._v("make widespread changes when an API is modified, or")]),s._v(" "),e("li",[s._v("auto-fix existing code when your public package makes a breaking change")])])]),s._v(" "),e("h2",{attrs:{id:"introduction-to-jscodeshift"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#introduction-to-jscodeshift"}},[s._v("#")]),s._v(" Introduction to JSCodeShift")]),s._v(" "),e("p",[s._v("jscodeshift is a toolkit for running "),e("em",[s._v("codemods")]),s._v(" over multiple JavaScript or\nTypeScript files.\nIt provides:")]),s._v(" "),e("ul",[e("li",[s._v("A runner, which executes the provided transform for each file passed to it.\nIt also outputs a summary of how many files have (not) been transformed.")]),s._v(" "),e("li",[s._v("A wrapper around "),e("a",{attrs:{href:"https://github.com/benjamn/recast",target:"_blank",rel:"noopener noreferrer"}},[s._v("recast"),e("OutboundLink")],1),s._v(", providing a different API.  Recast is an\nAST-to-AST transform tool and also tries to preserve the style of original code\nas much as possible.")])]),s._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/facebook/jscodeshift",target:"_blank"}},[s._v("JSCodeshift")]),s._v(" is a toolkit for running "),e("a",{attrs:{href:"jscodeshift#codemods"}},[s._v("codemods")]),s._v(" over multiple JavaScript or\nTypeScript files. The interface that jscodeshift provides is a wrapper around "),e("a",{attrs:{href:"#recast"}},[s._v("recast")]),s._v(" and "),e("a",{attrs:{href:"https://github.com/benjamn/ast-types",target:"_blank",rel:"noopener noreferrer"}},[s._v("ast-types"),e("OutboundLink")],1),s._v(" packages.")]),s._v(" "),e("p",[e("img",{attrs:{src:"/images/jscodeshift-recast-phases.png",alt:"jscodeshift and recast relation image"}})]),s._v(" "),e("p",[s._v("The jscodeshift toolkit allows you to pump a bunch of source files through a transform and replace them with what comes out the other end.")]),s._v(" "),e("p",[s._v("Inside the transform, you")]),s._v(" "),e("ol",[e("li",[s._v("parse the source into an abstract syntax tree (AST),")]),s._v(" "),e("li",[s._v("poke around to make your changes,")]),s._v(" "),e("li",[s._v("then regenerate the source from the altered AST.")])]),s._v(" "),e("p",[s._v("The interface that jscodeshift provides is a wrapper around "),e("a",{attrs:{href:"https://github.com/benjamn/recast",target:"_blank",rel:"noopener noreferrer"}},[s._v("recast"),e("OutboundLink")],1),s._v(" and "),e("a",{attrs:{href:"https://github.com/benjamn/ast-types",target:"_blank",rel:"noopener noreferrer"}},[s._v("ast-types"),e("OutboundLink")],1),s._v(" packages. "),e("a",{attrs:{href:"https://github.com/benjamn/recast",target:"_blank",rel:"noopener noreferrer"}},[s._v("recast"),e("OutboundLink")],1),s._v(" handles the conversion from source to AST and back while "),e("a",{attrs:{href:"https://github.com/benjamn/ast-types",target:"_blank",rel:"noopener noreferrer"}},[s._v("ast-types"),e("OutboundLink")],1),s._v(" handles the low-level interaction with the AST nodes.")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("jscodeshift -t some-transform.js input-file.js -d -p\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("This will run "),e("code",[s._v("input-file.js")]),s._v(" through the transform "),e("code",[s._v("some-transform.js")]),s._v(" and\nprint the results without altering the file.")]),s._v(" "),e("p",[s._v("We can install it globally:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$ npm install -g jscodeshift\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("For example, the following transformation in file "),e("a",{attrs:{href:"https://github.com/crguezl/hello-jscodeshift/blob/master/hello-jscodeshift.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("hello-jscodeshift.js"),e("OutboundLink")],1),s._v(":")]),s._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[s._v("module"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("exports")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("fileInfo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" api"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" options")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" api"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("jscodeshift")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("fileInfo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("source"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("findVariableDeclarators")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'foo'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("renameTo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'bar'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("toSource")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("Changes all the apearances of variable "),e("code",[s._v("foo")]),s._v(" to "),e("code",[s._v("bar")]),s._v(". See the following execution:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("➜  hello-jscodeshift git:(master) ✗ cat foo.js \nvar foo = 4;%                                                                                                                   \n➜  hello-jscodeshift git:(master) ✗ jscodeshift -t hello-jscodeshift.js foo.js \nProcessing 1 files... \nSpawning 1 workers...\nSending 1 files to free worker...\nAll done. \nResults: \n0 errors\n0 unmodified\n0 skipped\n1 ok\nTime elapsed: 0.947seconds \n➜  hello-jscodeshift git:(master) ✗ cat foo.js \nvar bar = 4;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("h2",{attrs:{id:"install"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#install"}},[s._v("#")]),s._v(" Install")]),s._v(" "),e("p",[s._v("Get jscodeshift from "),e("a",{attrs:{href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("npm"),e("OutboundLink")],1),s._v(":")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$ npm install -g jscodeshift\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("This will install the runner as "),e("code",[s._v("jscodeshift")]),s._v(".")]),s._v(" "),e("h2",{attrs:{id:"usage-from-the-command-line"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage-from-the-command-line"}},[s._v("#")]),s._v(" Usage from the Command Line")]),s._v(" "),e("p",[s._v("The CLI provides the following options:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('$ jscodeshift --help\n\nUsage: jscodeshift [OPTION]... PATH...\n  or:  jscodeshift [OPTION]... -t TRANSFORM_PATH PATH...\n  or:  jscodeshift [OPTION]... -t URL PATH...\n  or:  jscodeshift [OPTION]... --stdin < file_list.txt\n\nApply transform logic in TRANSFORM_PATH (recursively) to every PATH.\nIf --stdin is set, each line of the standard input is used as a path.\n\nOptions:\n"..." behind an option means that it can be supplied multiple times.\nAll options are also passed to the transformer, which means you can supply custom options that are not listed here.\n\n      --(no-)babel              apply babeljs to the transform file\n                                (default: true)\n  -c, --cpus=N                  start at most N child processes to process source files\n                                (default: max(all - 1, 1))\n  -d, --(no-)dry                dry run (no changes are made to files)\n                                (default: false)\n      --extensions=EXT          transform files with these file extensions (comma separated list)\n                                (default: js)\n  -h, --help                    print this help and exit\n      --ignore-config=FILE ...  ignore files if they match patterns sourced from a configuration file (e.g. a .gitignore)\n      --ignore-pattern=GLOB ...  ignore files that match a provided glob expression\n      --parser=babel|babylon|flow|ts|tsx  the parser to use for parsing the source files\n                                          (default: babel)\n      --parser-config=FILE      path to a JSON file containing a custom parser configuration for flow or babylon\n  -p, --(no-)print              print transformed files to stdout, useful for development\n                                (default: false)\n      --(no-)run-in-band        run serially in the current process\n                                (default: false)\n  -s, --(no-)silent             do not write to stdout or stderr\n                                (default: false)\n      --(no-)stdin              read file/directory list from stdin\n                                (default: false)\n  -t, --transform=FILE          path to the transform file. Can be either a local path or url\n                                (default: ./transform.js)\n  -v, --verbose=0|1|2           show more information about the transform process\n                                (default: 0)\n      --version                 print version and exit\n      --fail-on-error           return a 1 exit code when errors were found during execution of codemods\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br")])]),e("p",[s._v("The next section explains the structure of the transform module.")]),s._v(" "),e("h2",{attrs:{id:"usage-from-js-source"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage-from-js-source"}},[s._v("#")]),s._v(" Usage from JS Source")]),s._v(" "),e("p",[s._v("Here is an example:")]),s._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[s._v("➜  hello"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("jscodeshift git"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("master"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ✗ cat use"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("jscodeshift"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("js \n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" path "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'path'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("run")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" jscodeshift "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"jscodeshift/src/Runner"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" transformPath "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("join")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("__dirname"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello-jscodeshift.js"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" paths "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"foo.js"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"foo2.js"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" options "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("dry")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// dry run (no changes are made to files)")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("print")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// print transformed files to stdout, useful for development")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("verbose")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// show more information about the transform process (up to 2)")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("async")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" res "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("await")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("jscodeshift")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("transformPath"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" paths"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" options"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br")])]),e("p",[s._v("Here is the result of executing it with input files "),e("a",{attrs:{href:"https://github.com/crguezl/hello-jscodeshift/blob/master/foo.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("foo.js"),e("OutboundLink")],1),s._v(" and "),e("a",{attrs:{href:"https://github.com/crguezl/hello-jscodeshift/blob/master/foo2.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("foo2.js"),e("OutboundLink")],1),s._v(":")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('➜  hello-jscodeshift git:(master) node use-jscodeshift.js \nProcessing 2 files... \nRunning in dry mode, no files will be written! \nhello world!\nvar bar = 4;\nconsole.log(bar*bar /* square foo */);\nconsole.log("more foo");\n OKK foo2.js\nhello world!\nvar bar = 4;\nconsole.log(bar+bar /* twice foo */);\nconsole.log("foo");\n OKK foo.js\nAll done. \nResults: \n0 errors\n0 unmodified\n0 skipped\n2 ok\nTime elapsed: 0.628seconds \n{\n  stats: {},\n  timeElapsed: \'0.628\',\n  error: 0,\n  ok: 2,\n  nochange: 0,\n  skip: 0\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br")])]),e("h2",{attrs:{id:"how-to-write-the-transformation-module"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#how-to-write-the-transformation-module"}},[s._v("#")]),s._v(" How to write the transformation module")]),s._v(" "),e("p",[s._v("See section "),e("a",{attrs:{href:"jscodeshift-transformation-module"}},[s._v("How to write the transformation module")])]),s._v(" "),e("h2",{attrs:{id:"the-jscodeshift-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#the-jscodeshift-api"}},[s._v("#")]),s._v(" The jscodeshift API")]),s._v(" "),e("p",[s._v("See section "),e("a",{attrs:{href:"jscodeshift-api"}},[s._v("The jscodeshift API")])]),s._v(" "),e("h2",{attrs:{id:"references"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[s._v("#")]),s._v(" References")]),s._v(" "),e("p",[s._v("See the section "),e("a",{attrs:{href:"tree-transformations-references"}},[s._v("references about AST transformations")])])])}),[],!1,null,null,null);t.default=n.exports}}]);