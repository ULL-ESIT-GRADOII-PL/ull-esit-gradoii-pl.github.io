(window.webpackJsonp=window.webpackJsonp||[]).push([[225],{737:function(t,e,s){"use strict";s.r(e);var a=s(5),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"the-jscodeshift-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-jscodeshift-api"}},[t._v("#")]),t._v(" The jscodeshift API")]),t._v(" "),s("p",[t._v("As already mentioned, jscodeshift also provides a wrapper around "),s("a",{attrs:{href:"https://github.com/benjamn/recast",target:"_blank",rel:"noopener noreferrer"}},[t._v("recast"),s("OutboundLink")],1),t._v(".\nIn order to properly use the jscodeshift API, one has to understand the basic\nbuilding blocks of recast (and ASTs) as well.")]),t._v(" "),s("h2",{attrs:{id:"core-concepts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#core-concepts"}},[t._v("#")]),t._v(" Core Concepts")]),t._v(" "),s("h3",{attrs:{id:"ast-nodes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ast-nodes"}},[t._v("#")]),t._v(" AST nodes")]),t._v(" "),s("p",[t._v("An AST node is a plain JavaScript object with a specific set of fields, in\naccordance with the "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mozilla Parser API"),s("OutboundLink")],1),t._v(". The primary way to identify nodes\nis via their "),s("code",[t._v("type")]),t._v(".")]),t._v(" "),s("p",[t._v("For example, string literals are represented via "),s("code",[t._v("Literal")]),t._v(" nodes, which\nhave the structure")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "foo"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Literal'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("raw")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\"foo\"'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("It's OK to not know the structure of every AST node type.\nThe "),s("a",{attrs:{href:"http://astexplorer.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("(esprima) AST explorer"),s("OutboundLink")],1),t._v(" is an online tool to inspect the AST\nfor a given piece of JS code.")]),t._v(" "),s("h3",{attrs:{id:"path-objects"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#path-objects"}},[t._v("#")]),t._v(" Path objects")]),t._v(" "),s("p",[t._v("Recast itself relies heavily on "),s("a",{attrs:{href:"https://github.com/benjamn/ast-types",target:"_blank",rel:"noopener noreferrer"}},[t._v("ast-types"),s("OutboundLink")],1),t._v(" which defines methods to")]),t._v(" "),s("ol",[s("li",[t._v("traverse the AST,")]),t._v(" "),s("li",[t._v("access node fields and")]),t._v(" "),s("li",[t._v("build new nodes.")])]),t._v(" "),s("p",[t._v("ast-types wraps every AST node into a "),s("em",[t._v("path object")]),t._v(".\nPaths contain meta-information and helper methods to\nprocess AST nodes.")]),t._v(" "),s("p",[t._v("For example, the child-parent relationship between two nodes is not explicitly\ndefined. Given a plain AST node, it is not possible to traverse the tree "),s("em",[t._v("up")]),t._v(".\nGiven a "),s("em",[t._v("path object")]),t._v(" however, the parent can be traversed to via "),s("code",[t._v("path.parent")]),t._v(".")]),t._v(" "),s("p",[t._v("For more information about the path object API, please have a look at\n"),s("a",{attrs:{href:"https://github.com/benjamn/ast-types",target:"_blank",rel:"noopener noreferrer"}},[t._v("ast-types"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"builders"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#builders"}},[t._v("#")]),t._v(" Builders")]),t._v(" "),s("p",[t._v('To make creating AST nodes a bit simpler and "safer", ast-types defines a couple\nof '),s("em",[t._v("builder methods")]),t._v(", which are also exposed on "),s("code",[t._v("jscodeshift")]),t._v(".")]),t._v(" "),s("p",[t._v("For example, the following creates an AST equivalent to "),s("code",[t._v("foo(bar)")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// inside a module transform")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" jscodeshift"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// foo(bar);")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ast "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("callExpression")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("identifier")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("identifier")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[t._v("jscodeshift Lowercase vs Uppercase fields")]),t._v(" "),s("p",[t._v("If you access a "),s("code",[t._v("jscodeshift")]),t._v(" field starting with lowercase like `j.callExpression, it will return a "),s("strong",[t._v("build")]),t._v(" instance.")]),t._v(" "),s("p",[t._v("If you access a "),s("code",[t._v("jscodeshift")]),t._v(" field starting with uppercase, it will return a "),s("strong",[t._v("predicate")]),t._v(" which  is used to filter and check nodes.")])]),t._v(" "),s("p",[t._v("The signature of each builder function is best learned by having a look at the\n"),s("a",{attrs:{href:"https://github.com/benjamn/ast-types/blob/master/def/",target:"_blank",rel:"noopener noreferrer"}},[t._v("definition files"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"collections-and-traversal"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#collections-and-traversal"}},[t._v("#")]),t._v(" Collections and Traversal")]),t._v(" "),s("p",[t._v("In order to transform the AST, you have to traverse it and find the nodes that\nneed to be changed. jscodeshift is built around the idea of "),s("strong",[s("a",{attrs:{href:"https://github.com/facebook/jscodeshift/wiki/jscodeshift-Documentation#collections",target:"_blank",rel:"noopener noreferrer"}},[t._v("collections"),s("OutboundLink")],1)]),t._v(" of\n"),s("strong",[t._v("paths")]),t._v(" and thus provides a different way of processing an AST than recast or\nast-types.")]),t._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://github.com/facebook/jscodeshift/wiki/jscodeshift-Documentation#collections",target:"_blank",rel:"noopener noreferrer"}},[t._v("Collections"),s("OutboundLink")],1),t._v(" contain "),s("a",{attrs:{href:"https://github.com/facebook/jscodeshift/wiki/jscodeshift-Documentation#nodepaths",target:"_blank",rel:"noopener noreferrer"}},[t._v("nodepaths"),s("OutboundLink")],1),t._v(",")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/facebook/jscodeshift/wiki/jscodeshift-Documentation#nodepaths",target:"_blank",rel:"noopener noreferrer"}},[t._v("nodepaths"),s("OutboundLink")],1),t._v(" contain nodes, and")]),t._v(" "),s("li",[t._v("nodes are what the AST is made of.")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/facebook/jscodeshift/wiki/jscodeshift-Documentation#intro",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"/images/nodes-nodepaths-collections.png",alt:""}}),s("OutboundLink")],1)]),t._v(" "),s("p",[s("em",[t._v("A collection has methods to process the nodes inside a collection, often\nresulting in a new collection")])]),t._v(" "),s("p",[t._v("This results in a fluent interface, which can\nmake the transform more readable.")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/facebook/jscodeshift/wiki/jscodeshift-Documentation#collections",target:"_blank",rel:"noopener noreferrer"}},[t._v("Collections"),s("OutboundLink")],1),t._v(' are "typed" which means that the type of a collection is the\n"lowest" type all AST nodes in the collection have in common. That means you\ncannot call a method for a '),s("code",[t._v("FunctionExpression")]),t._v(" collection on an "),s("code",[t._v("Identifier")]),t._v("\ncollection.")]),t._v(" "),s("p",[t._v("Here is an example of how one would find/traverse all "),s("code",[t._v("Identifier")]),t._v(" nodes with\njscodeshift:")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// jscodeshift")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("jscodeshift")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("src"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("jscodeshift"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Identifier"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("path")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something with path")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("The "),s("a",{attrs:{href:"https://crguezl.github.io/jscodeshift-api-docs/collections_Node.js.html#line32",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("jscodeshift(src).find")]),t._v(" method"),s("OutboundLink")],1),t._v(" has two parameters "),s("code",[t._v("type")]),t._v(" and "),s("code",[t._v("filter")]),t._v(".")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("type")]),t._v(" parameter is a "),s("code",[t._v("predicateType")]),t._v(" object:")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Name of the node"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"kind"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"PredicateType"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"predicate"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" deep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("The "),s("code",[t._v("filter")]),t._v(" parameter is optional and is a function or a Node. Not used in the former example.\nHere is an example of transformation using a filter:")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fileInfo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" api")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" api"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("jscodeshift"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" root "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("j")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fileInfo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" callExpressions "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CallExpression"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// filter ")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("callee")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'MemberExpression'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("object")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Identifier'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'console'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    callExpressions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toSource")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[t._v("jscodeshift Lowercase vs Uppercase fields")]),t._v(" "),s("p",[t._v("If you access a "),s("code",[t._v("jscodeshift")]),t._v(" field starting with lowercase like `j.callExpression, it will return a "),s("strong",[t._v("build")]),t._v(" instance.")]),t._v(" "),s("p",[t._v("If you access a "),s("code",[t._v("jscodeshift")]),t._v(" field starting with uppercase, it will return a "),s("strong",[t._v("predicate")]),t._v(" which  is used to filter and check nodes.")])]),t._v(" "),s("p",[t._v("The call "),s("code",[t._v("root.find(j.CallExpression")]),t._v(" returns a collection of "),s("a",{attrs:{href:"https://github.com/facebook/jscodeshift/wiki/jscodeshift-Documentation#nodepaths",target:"_blank",rel:"noopener noreferrer"}},[t._v("nodepaths"),s("OutboundLink")],1),t._v(" containing just the nodes that are "),s("code",[t._v("CallExpressions")]),t._v(". Without the second "),s("code",[t._v("filter")]),t._v(" option, The  "),s("code",[t._v("find")]),t._v("  would not just find the console "),s("code",[t._v("CallExpressions")]),t._v(", it would find every "),s("code",[t._v("CallExpression")]),t._v(" in the source. To force greater specificity, we provide a second argument to "),s("code",[t._v(".find")]),t._v(": An object of additional parameters, specifying that we want the "),s("code",[t._v("callee")]),t._v("  to be a "),s("code",[t._v("MemberExpression")]),t._v("  and the object to be an "),s("code",[t._v("Identifier")]),t._v(" with "),s("code",[t._v("name")]),t._v(" equal to "),s("code",[t._v("console")]),t._v(".")]),t._v(" "),s("p",[t._v("See the full example in the folder "),s("code",[t._v("remove-calls-to-console")]),t._v(" of the repo "),s("a",{attrs:{href:"https://github.com/crguezl/hello-jscodeshift/tree/master/remove-calls-to-console",target:"_blank",rel:"noopener noreferrer"}},[t._v("crguezl/hello-jscodeshift"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("See the code of the class "),s("code",[t._v("Collection")]),t._v(" in file "),s("a",{attrs:{href:"https://github.com/facebook/jscodeshift/blob/main/src/Collection.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("Collection.js"),s("OutboundLink")],1),t._v(" and the API docs in "),s("a",{attrs:{href:"https://crguezl.github.io/jscodeshift-api-docs/Collection.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Class: Collection"),s("OutboundLink")],1),t._v(" docs.")]),t._v(" "),s("p",[t._v("See its "),s("a",{attrs:{href:"https://github.com/facebook/jscodeshift/blob/main/src/collections",target:"_blank",rel:"noopener noreferrer"}},[t._v("extensions"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"extensibility"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#extensibility"}},[t._v("#")]),t._v(" Extensibility")]),t._v(" "),s("p",[t._v("jscodeshift provides "),s("a",{attrs:{href:"https://crguezl.github.io/jscodeshift-api-docs/global.html#registerMethods",target:"_blank",rel:"noopener noreferrer"}},[t._v("an API to extend collections"),s("OutboundLink")],1),t._v(". By moving common operators\ninto helper functions (which can be stored separately in other modules), a\ntransform can be made more readable.")]),t._v(" "),s("p",[t._v("There are two types of extensions:")]),t._v(" "),s("ol",[s("li",[t._v("generic extensions and")]),t._v(" "),s("li",[t._v("type-specific extensions.")])]),t._v(" "),s("p",[s("strong",[t._v("Generic extensions")]),t._v(" are applicable to all "),s("a",{attrs:{href:"https://github.com/facebook/jscodeshift/wiki/jscodeshift-Documentation#collections",target:"_blank",rel:"noopener noreferrer"}},[t._v("collections"),s("OutboundLink")],1),t._v(". As such,\nthey typically don't access specific node data, but rather traverse the AST from\nthe nodes in the collection.")]),t._v(" "),s("p",[s("strong",[t._v("Type-specific")]),t._v(" extensions work only on specific\nnode types and are not callable on differently typed "),s("a",{attrs:{href:"https://github.com/facebook/jscodeshift/wiki/jscodeshift-Documentation#collections",target:"_blank",rel:"noopener noreferrer"}},[t._v("collections"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"jscodeshift-registermethods-examples"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jscodeshift-registermethods-examples"}},[t._v("#")]),t._v(" jscodeshift.registerMethods Examples")]),t._v(" "),s("p",[t._v("Adding a method to all "),s("code",[t._v("Identifiers")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[t._v(" ")]),s("br")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("jscodeshift"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("registerMethods")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("logNames")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("path")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" jscodeshift"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Identifier"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("Inside the "),s("code",[t._v("logNames")]),t._v(" function "),s("code",[t._v("this")]),t._v(" refers to the current Collection.")]),t._v(" "),s("p",[t._v("Here is another example adding a method to all "),s("code",[t._v("[collections][]")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("jscodeshift"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("registerMethods")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("findIdentifiers")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("jscodeshift"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Identifier"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("Then we can use them this way:")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("jscodeshift")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findIdentifiers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("logNames")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("jscodeshift")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("logNames")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error, unless `ast` only consists of Identifier nodes")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("See an "),s("a",{attrs:{href:"register-method-examples"}},[t._v("example")])]),t._v(" "),s("h2",{attrs:{id:"passing-options-to-recast"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#passing-options-to-recast"}},[t._v("#")]),t._v(" Passing options to "),s("a",{attrs:{href:"https://github.com/benjamn/recast",target:"_blank",rel:"noopener noreferrer"}},[t._v("recast"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("You may want to change some of the output settings (like setting "),s("code",[t._v("'")]),t._v(" instead of "),s("code",[t._v('"')]),t._v(").\nThis can be done by passing config options to "),s("a",{attrs:{href:"https://github.com/benjamn/recast",target:"_blank",rel:"noopener noreferrer"}},[t._v("recast"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toSource")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("quote")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'single'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sets strings to use single quotes in transformed code.")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("You can also pass options to recast's "),s("code",[t._v("parse")]),t._v(" method by passing an object to\njscodeshift as second argument:")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("jscodeshift")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("More on config options "),s("a",{attrs:{href:"https://github.com/benjamn/recast/blob/52a7ec3eaaa37e78436841ed8afc948033a86252/lib/options.js#L61",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"unit-testing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unit-testing"}},[t._v("#")]),t._v(" Unit Testing")]),t._v(" "),s("p",[t._v("Véase la sección "),s("a",{attrs:{href:"jscodeshift-testing"}},[t._v("Unit Testing")])]),t._v(" "),s("h2",{attrs:{id:"examples-from-write-code-to-rewrite-your-code-jscodeshift-tutorial"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#examples-from-write-code-to-rewrite-your-code-jscodeshift-tutorial"}},[t._v("#")]),t._v(" Examples from  "),s("em",[t._v("Write Code to Rewrite Your Code: jscodeshift")]),t._v(" tutorial")]),t._v(" "),s("p",[t._v("Read the tutorial at "),s("a",{attrs:{href:"https://www.toptal.com/javascript/write-code-to-rewrite-your-code",target:"_blank"}},[t._v("Write Code to Rewrite Your Code: jscodeshift")]),t._v(" Examples: removing console.log, replacing imported method calls, from positional parameters to parameter object")]),t._v(" "),s("h3",{attrs:{id:"remove-calls-to-console"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#remove-calls-to-console"}},[t._v("#")]),t._v(" Remove calls to console")]),t._v(" "),s("p",[t._v("Here you have the code of the example "),s("a",{attrs:{href:"https://github.com/crguezl/hello-jscodeshift/tree/master/remove-calls-to-console",target:"_blank",rel:"noopener noreferrer"}},[t._v("remove calls to console"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("Exercise")])]),t._v(" "),s("p",[t._v("Write a transformation "),s("code",[t._v("remove-console-logs.js")]),t._v(" that only removes "),s("code",[t._v("console.logs")]),t._v(" but not "),s("code",[t._v("console.warn")]),t._v(" and others")]),t._v(" "),s("h3",{attrs:{id:"replacing-imported-method-calls"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#replacing-imported-method-calls"}},[t._v("#")]),t._v(" Replacing imported method calls")]),t._v(" "),s("p",[t._v("Here is the code of the example "),s("a",{attrs:{href:"https://github.com/crguezl/hello-jscodeshift/tree/master/replacing-imported-method-calls",target:"_blank",rel:"noopener noreferrer"}},[t._v("Replacing imported method calls"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"from-positional-parameters-to-parameter-object"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#from-positional-parameters-to-parameter-object"}},[t._v("#")]),t._v(" From positional parameters to parameter object")]),t._v(" "),s("p",[t._v("Code for the example "),s("a",{attrs:{href:"https://github.com/crguezl/hello-jscodeshift/tree/master/signature-change",target:"_blank",rel:"noopener noreferrer"}},[t._v("From positional parameters to parameter object"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"example-inserting-console-log-at-the-beginning-of-a-function"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example-inserting-console-log-at-the-beginning-of-a-function"}},[t._v("#")]),t._v(" Example inserting console.log at the beginning of a function")]),t._v(" "),s("p",[t._v("See the code at the folder "),s("a",{attrs:{href:"https://github.com/crguezl/hello-jscodeshift/tree/master/prefix-functions",target:"_blank",rel:"noopener noreferrer"}},[t._v("crguezl/hello-jscodeshift/prefix-functions"),s("OutboundLink")],1),t._v(" in the "),s("code",[t._v("master")]),t._v(" branch")]),t._v(" "),s("h2",{attrs:{id:"trailing-commas"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#trailing-commas"}},[t._v("#")]),t._v(" Trailing Commas")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/crguezl/learning-jscodeshift/blob/master/transforms/trailing-commas.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("crguezl/learning-jscodeshift/transforms/trailing-commas.js"),s("OutboundLink")],1),t._v(",\nforked from "),s("a",{attrs:{href:"https://github.com/cpojer/js-codemod/",target:"_blank",rel:"noopener noreferrer"}},[t._v("js-codemod"),s("OutboundLink")],1),t._v(" - Codemod scripts to transform code to next generation JS.")])]),t._v(" "),s("h2",{attrs:{id:"example-functionexpression-to-an-arrowfunctionexpression"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example-functionexpression-to-an-arrowfunctionexpression"}},[t._v("#")]),t._v(" Example FunctionExpression to an ArrowFunctionExpression")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/crguezl/hello-jscodeshift/tree/master/function-expression-to-arrow-expression",target:"_blank",rel:"noopener noreferrer"}},[t._v("FunctionExpression to an ArrowFunctionExpression when safe to do so"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"other-examples"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#other-examples"}},[t._v("#")]),t._v(" Other Examples")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/reactjs/react-codemod",target:"_blank",rel:"noopener noreferrer"}},[t._v("react-codemod"),s("OutboundLink")],1),t._v(" - React codemod scripts to update React APIs.")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/jhgg/js-transforms",target:"_blank",rel:"noopener noreferrer"}},[t._v("js-transforms"),s("OutboundLink")],1),t._v(" - Some documented codemod experiments to help you learn.")])]),t._v(" "),s("h2",{attrs:{id:"jscodeshift-documentation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jscodeshift-documentation"}},[t._v("#")]),t._v(" JsCodeShift Documentation")]),t._v(" "),s("p",[t._v("See "),s("a",{attrs:{href:"https://github.com/facebook/jscodeshift/wiki/jscodeshift-Documentation",target:"_blank",rel:"noopener noreferrer"}},[t._v("jscodeshift wiki: documentation"),s("OutboundLink")],1),t._v("\nand "),s("a",{attrs:{href:"https://crguezl.github.io/jscodeshift-api-docs/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("crguezl/jscodeshift-api-docs"),s("OutboundLink")],1),t._v(" deployment")]),t._v(" "),s("h2",{attrs:{id:"recipes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#recipes"}},[t._v("#")]),t._v(" Recipes")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"recipes/retain-first-comment"}},[t._v("Retain leading comment(s) in file when replacing/removing first statement")])])]),t._v(" "),s("h2",{attrs:{id:"references"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[t._v("#")]),t._v(" References")]),t._v(" "),s("p",[t._v("See the section "),s("a",{attrs:{href:"tree-transformations-references"}},[t._v("references about AST transformations")])])])}),[],!1,null,null,null);e.default=n.exports}}]);